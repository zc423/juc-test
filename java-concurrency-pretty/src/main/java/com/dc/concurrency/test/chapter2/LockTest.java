package com.dc.concurrency.test.chapter2;

/**
 * @author DCZhang
 * @title LockTest
 * @date 2023/7/25 11:23
 * @description 乐观锁和悲观锁
 * <>2.12</>
 * 乐观锁: 乐观锁认为自己在使用数据的时候不会有其他线程修改数据,所以不会上锁,只是在更新的时候判断一下在此期间有没有别的线程更新了数据
 * 数据库中的实现: 查询数据库 更新 更新数据库(根据版本号) 返回修改结果
 * 需要加入重试的时候
 * num = 重试次数
 * while(num > 0){
 *     查询数据库
 *     更新
 *     更新数据库(根据版本号)
 *     返回修改结果
 *     if (返回修改结果=成功(修改数量能对上))
 *     num--
 * }
 *
 * 悲观锁: 悲观锁认为自己在使用数据的时候一定会有其他线程修改数据,所以在获取数据的时候会上锁,这样别的线程想要获取数据就会阻塞直到当前线程释放锁
 * 数据库中的实现: select for update/代码中直接加锁
 *
 */
public class LockTest {
}
